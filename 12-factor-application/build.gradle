apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven-publish'
apply plugin: 'liberty'

buildscript {
    repositories {
        maven {
            name = 'Sonatype Nexus Snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
    }
}

//Dependencies
repositories { mavenCentral(); }

dependencies {
    providedCompile group:'javax.servlet', name:'javax.servlet-api', version:'3.1.0'
    providedCompile group:'javax.ws.rs', name:'javax.ws.rs-api', version: '2.0.1'
    providedCompile group:'javax.json', name:'javax.json-api', version:'1.0'
    testCompile 'junit:junit:4.12'
    testRuntime 'org.apache.cxf:cxf-rt-rs-client:3.1.1'
    testRuntime 'org.glassfish:javax.json:1.0.4'
}

sourceCompatibility = 1.7

// Set the Eclipse facets to use 3.0 of the Dynamic Web Module
eclipse.wtp.facet {
    facets = []
    facet name: 'jst.java', type: 'fixed'
    facet name: 'jst.web', type: 'fixed'
    facet name: 'jst.java', version: '1.7'
    facet name: 'jst.web', version: '3.0'
}

// Copy WAR into local server folder.
task publishWar(dependsOn: 'jar', type: Copy) {
    from(war)
    into('../12-factor-wlpcfg/servers/12FactorAppServer/apps')
}

liberty {
    installDir = owner.hasProperty('libertyRoot') ? "${libertyRoot}" : null
    serverName = '12FactorAppServer'
    userDir = '../12-factor-wlpcfg'

    packageLiberty {
        include = 'usr'
        archive = 'build/libs/12FactorApp.zip'
    }
}

publishing {
    publications {
        mavenWar(MavenPublication) {
            version '1.0-SNAPSHOT'
            groupId 'net.wasdev.wlp.sample'
            artifactId 'microservices-12factor'

            from components.web
        }
    }
}

// Add a functional test task that runs during the 'check' phase that uses the Liberty Gradle plugin
// to launch Liberty and run the test classes in the fvt source set
task fvt(type: Test, dependsOn: publishWar) {
    group 'Verification'
    description 'Runs the functional verification tests.'
    reports.html.destination = file("$buildDir/reports/fvt")
    reports.junitXml.destination = file("$buildDir/test-results/fvt")
    include '**/fvt/**'
    exclude '**/unit/**'
    systemProperties = ['liberty.test.port': "${libertyPort}"]
    dependsOn libertyStart
    finalizedBy libertyStop
}

test {
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    include '**/unit/**'
    exclude '**/fvt/**'
}

assemble.dependsOn('publishWar')

// If libertyRoot is not set, automatically download & install Liberty runtime
if (!hasProperty('libertyRoot')) {
    fvt.dependsOn('installLiberty')
}

// Run FVT by default
//check.dependsOn fvt

// Package things up at the end
check.dependsOn('libertyPackage')
